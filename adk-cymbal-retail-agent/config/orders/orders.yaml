# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
openapi: 3.0.0
info:
  title: Orders API
  description: >-
    This API manages orders, allowing for creation, retrieval, and 
    update of orders.
  version: 1.0.0
  contact:
    name: Cymbal Retail
    url: https://cymbal-retail.com
  termsOfService: https://cymbal-retail/terms/
servers:
  - url: https://APIGEE_HOST/v1/samples/adk-cymbal-retail/orders
security:
  - ApiKeyAuth: []
paths:
  /:
    get:
      summary: Get a list of all orders
      operationId: getAllOrders
      tags:
        - orders
      responses:
        '200':
          description: A list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new order
      operationId: createOrder
      tags:
        - orders
      requestBody:
        description: Order details to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrder'
      responses:
        '201':
          description: Order created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /{orderId}:
    get:
      summary: Get an order by ID
      operationId: getOrderById
      tags:
        - orders
      parameters:
        - name: orderId
          in: path
          description: The ID of the order to retrieve.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: A single order.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update an existing order
      operationId: updateOrder
      tags:
        - orders
      parameters:
        - name: orderId
          in: path
          description: The ID of the order to update.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Order details to update.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrder'
      responses:
        '200':
          description: Order updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Order:
      type: object
      required:
        - id
        - customerId
        - items
        - totalAmount
        - status
        - shippingAddress
      properties:
        id:
          type: integer
          format: int64
          description: The unique identifier for the order.
          example: 123456
        customerId:
          type: integer
          format: int64
          description: The ID of the customer who placed the order.
          example: 98765
        items:
          type: array
          description: A list of products in the order.
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: float
          description: The total cost of the order.
          example: 125.50
        status:
          type: string
          description: The current status of the order.
          enum:
            - pending
            - processing
            - shipped
            - delivered
            - canceled
          example: "shipped"
        shippingAddress:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
          description: The timestamp when the order was created.
          example: "2023-08-25T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: The timestamp when the order was last updated.
          example: "2023-08-25T14:30:00Z"
    NewOrder:
      type: object
      required:
        - customerId
        - items
        - shippingAddress
      properties:
        customerId:
          type: integer
          format: int64
          description: The ID of the customer placing the order.
          example: 98765
        items:
          type: array
          description: A list of products to be included in the order.
          items:
            $ref: '#/components/schemas/OrderItem'
        shippingAddress:
          $ref: '#/components/schemas/Address'
    UpdateOrder:
      type: object
      properties:
        status:
          type: string
          description: The new status of the order.
          enum:
            - pending
            - processing
            - shipped
            - delivered
            - canceled
          example: "delivered"
        shippingAddress:
          $ref: '#/components/schemas/Address'
    OrderItem:
      type: object
      required:
        - productId
        - quantity
        - price
      properties:
        productId:
          type: string
          description: The ID of the product.
          example: "sku-12345"
        quantity:
          type: integer
          description: The number of this product in the order.
          example: 2
        price:
          type: number
          format: float
          description: The price of a single unit of the product at the time of order.
          example: 49.99
    Address:
      type: object
      required:
        - street
        - city
        - state
        - zipCode
        - country
      properties:
        street:
          type: string
          description: Street address.
          example: "123 Main St"
        city:
          type: string
          description: City.
          example: "Anytown"
        state:
          type: string
          description: State or province.
          example: "CA"
        zipCode:
          type: string
          description: Zip or postal code.
          example: "12345"
        country:
          type: string
          description: Country.
          example: "USA"
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: The error code.
          example: 404
        message:
          type: string
          description: A detailed error message.
          example: "Order not found with the given ID."
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      description: API key to authorize requests.
      name: x-apikey
      in: header
